{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport { createStage } from '../gameHelpers';\nexport const useStage = (player, resetPlayer) => {\n  const [stage, setStage] = useState(createStage());\n  const [rowsCleared, setRowsCleared] = useState(0);\n  useEffect(() => {\n    setRowsCleared(0);\n\n    const sweepRows = newStage => newStage.reduce((ack, row) => {\n      //check if row contains merged cells\n      if (row.findINdex(cell => cell[0] === 0) === -1) {}\n    });\n\n    const updateStage = prevStage => {\n      //First clear the stage from previous render\n      const newStage = prevStage.map(row => row.map(cell => cell[1] === 'clear' ? [0, 'clear'] : cell)); //Then draw the tetromino (tetris block)\n\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            newStage[y + player.pos.y][x + player.pos.x] = [value, `${player.collided ? 'merged' : 'clear'}`];\n          }\n        });\n      });\n\n      if (player.collided) {\n        //check if player collided\n        resetPlayer();\n      }\n\n      return newStage;\n    };\n\n    setStage(prev => updateStage(prev));\n  }, [player, resetPlayer]);\n  return [stage, setStage];\n};","map":{"version":3,"sources":["/Users/melanierogoff/Desktop/pikatetris/src/hooks/useStage.js"],"names":["useState","useEffect","createStage","useStage","player","resetPlayer","stage","setStage","rowsCleared","setRowsCleared","sweepRows","newStage","reduce","ack","row","findINdex","cell","updateStage","prevStage","map","tetromino","forEach","y","value","x","pos","collided","prev"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,gBAA5B;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAACC,MAAD,EAASC,WAAT,KAAyB;AAC7C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAACE,WAAW,EAAZ,CAAlC;AACA,QAAM,CAACM,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,CAAC,CAAD,CAA9C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZQ,IAAAA,cAAc,CAAC,CAAD,CAAd;;AAEA,UAAMC,SAAS,GAAGC,QAAQ,IACtBA,QAAQ,CAACC,MAAT,CAAgB,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC1B;AACA,UAAIA,GAAG,CAACC,SAAJ,CAAcC,IAAI,IAAIA,IAAI,CAAC,CAAD,CAAJ,KAAY,CAAlC,MAAyC,CAAC,CAA9C,EAAiD,CAEhD;AACJ,KALD,CADJ;;AAQA,UAAMC,WAAW,GAAGC,SAAS,IAAI;AAAC;AAC9B,YAAMP,QAAQ,GAAGO,SAAS,CAACC,GAAV,CAAcL,GAAG,IAC9BA,GAAG,CAACK,GAAJ,CAAQH,IAAI,IAAKA,IAAI,CAAC,CAAD,CAAJ,KAAY,OAAZ,GAAsB,CAAC,CAAD,EAAI,OAAJ,CAAtB,GAAqCA,IAAtD,CADa,CAAjB,CAD6B,CAI7B;;AACAZ,MAAAA,MAAM,CAACgB,SAAP,CAAiBC,OAAjB,CAAyB,CAACP,GAAD,EAAMQ,CAAN,KAAY;AACjCR,QAAAA,GAAG,CAACO,OAAJ,CAAY,CAACE,KAAD,EAAQC,CAAR,KAAc;AACtB,cAAID,KAAK,KAAK,CAAd,EAAiB;AACbZ,YAAAA,QAAQ,CAACW,CAAC,GAAGlB,MAAM,CAACqB,GAAP,CAAWH,CAAhB,CAAR,CAA2BE,CAAC,GAAGpB,MAAM,CAACqB,GAAP,CAAWD,CAA1C,IAA+C,CAC3CD,KAD2C,EAE1C,GAAEnB,MAAM,CAACsB,QAAP,GAAkB,QAAlB,GAA6B,OAAQ,EAFG,CAA/C;AAIH;AACJ,SAPD;AAQH,OATD;;AAWA,UAAItB,MAAM,CAACsB,QAAX,EAAqB;AAAE;AACnBrB,QAAAA,WAAW;AACd;;AAED,aAAOM,QAAP;AACH,KArBD;;AAuBAJ,IAAAA,QAAQ,CAACoB,IAAI,IAAIV,WAAW,CAACU,IAAD,CAApB,CAAR;AACH,GAnCQ,EAmCN,CAACvB,MAAD,EAASC,WAAT,CAnCM,CAAT;AAqCA,SAAO,CAACC,KAAD,EAAQC,QAAR,CAAP;AACH,CA1CM","sourcesContent":["import { useState, useEffect } from 'react';\nimport { createStage } from '../gameHelpers';\n\nexport const useStage = (player, resetPlayer) => {\n    const [stage, setStage] = useState(createStage());\n    const [rowsCleared, setRowsCleared] = useState(0);\n\n    useEffect(() => {\n        setRowsCleared(0);\n\n        const sweepRows = newStage =>\n            newStage.reduce((ack, row) => {\n                //check if row contains merged cells\n                if (row.findINdex(cell => cell[0] === 0) === -1) {\n                    \n                }\n            })\n\n        const updateStage = prevStage => {//First clear the stage from previous render\n            const newStage = prevStage.map(row =>\n                row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell)),\n            )\n            //Then draw the tetromino (tetris block)\n            player.tetromino.forEach((row, y) => {\n                row.forEach((value, x) => {\n                    if (value !== 0) { \n                        newStage[y + player.pos.y][x + player.pos.x] = [\n                            value,\n                            `${player.collided ? 'merged' : 'clear'}`,\n                        ];\n                    }\n                });\n            });\n        \n            if (player.collided) { //check if player collided\n                resetPlayer();\n            }\n\n            return newStage;\n        };\n\n        setStage(prev => updateStage(prev));\n    }, [player, resetPlayer]);\n\n    return [stage, setStage];\n}\n"]},"metadata":{},"sourceType":"module"}