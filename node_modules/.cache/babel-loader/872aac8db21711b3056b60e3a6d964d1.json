{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport { createStage } from '../gameHelpers';\nexport const useStage = (player, resetPlayer) => {\n  const [stage, setStage] = useState(createStage());\n  useEffect(() => {\n    const updateStage = prevStage => {\n      //First clear the stage from previous render\n      const newStage = prevStage.map(row => row.map(cell => cell[1] === 'clear' ? [0, 'clear'] : cell)); //Then draw the tetromino (tetris block)\n\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            newStage[y + player.pos.y][x + player.pos.x] = [value, `${player.collided ? 'merged' : 'clear'}`];\n          }\n        });\n      }); //Then check if we collided\n\n      if (player.collied) return newStage;\n    };\n\n    setStage(prev => updateStage(prev));\n  }, [player]);\n  return [stage, setStage];\n};","map":{"version":3,"sources":["/Users/melanierogoff/Desktop/pikatetris/src/hooks/useStage.js"],"names":["useState","useEffect","createStage","useStage","player","resetPlayer","stage","setStage","updateStage","prevStage","newStage","map","row","cell","tetromino","forEach","y","value","x","pos","collided","collied","prev"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,gBAA5B;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAACC,MAAD,EAASC,WAAT,KAAyB;AAE7C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAACE,WAAW,EAAZ,CAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMO,WAAW,GAAGC,SAAS,IAAI;AAC7B;AACA,YAAMC,QAAQ,GAAGD,SAAS,CAACE,GAAV,CAAcC,GAAG,IAC9BA,GAAG,CAACD,GAAJ,CAAQE,IAAI,IAAKA,IAAI,CAAC,CAAD,CAAJ,KAAY,OAAZ,GAAsB,CAAC,CAAD,EAAI,OAAJ,CAAtB,GAAqCA,IAAtD,CADa,CAAjB,CAF6B,CAK7B;;AACAT,MAAAA,MAAM,CAACU,SAAP,CAAiBC,OAAjB,CAAyB,CAACH,GAAD,EAAMI,CAAN,KAAY;AACjCJ,QAAAA,GAAG,CAACG,OAAJ,CAAY,CAACE,KAAD,EAAQC,CAAR,KAAc;AACtB,cAAID,KAAK,KAAK,CAAd,EAAiB;AACbP,YAAAA,QAAQ,CAACM,CAAC,GAAGZ,MAAM,CAACe,GAAP,CAAWH,CAAhB,CAAR,CAA2BE,CAAC,GAAGd,MAAM,CAACe,GAAP,CAAWD,CAA1C,IAA+C,CAC3CD,KAD2C,EAE1C,GAAEb,MAAM,CAACgB,QAAP,GAAkB,QAAlB,GAA6B,OAAQ,EAFG,CAA/C;AAIH;AACJ,SAPD;AAQH,OATD,EAN6B,CAiB7B;;AACA,UAAIhB,MAAM,CAACiB,OAAX,EACA,OAAOX,QAAP;AACH,KApBD;;AAsBAH,IAAAA,QAAQ,CAACe,IAAI,IAAId,WAAW,CAACc,IAAD,CAApB,CAAR;AACH,GAxBQ,EAwBN,CAAClB,MAAD,CAxBM,CAAT;AA0BA,SAAO,CAACE,KAAD,EAAQC,QAAR,CAAP;AACH,CA/BM","sourcesContent":["import { useState, useEffect } from 'react';\nimport { createStage } from '../gameHelpers';\n\nexport const useStage = (player, resetPlayer) => {\n\n    const [stage, setStage] = useState(createStage());\n\n    useEffect(() => {\n        const updateStage = prevStage => {\n            //First clear the stage from previous render\n            const newStage = prevStage.map(row =>\n                row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell)),\n            )\n            //Then draw the tetromino (tetris block)\n            player.tetromino.forEach((row, y) => {\n                row.forEach((value, x) => {\n                    if (value !== 0) { \n                        newStage[y + player.pos.y][x + player.pos.x] = [\n                            value,\n                            `${player.collided ? 'merged' : 'clear'}`,\n                        ];\n                    }\n                });\n            });\n        \n            //Then check if we collided\n            if (player.collied)\n            return newStage;\n        };\n\n        setStage(prev => updateStage(prev));\n    }, [player]);\n\n    return [stage, setStage];\n}"]},"metadata":{},"sourceType":"module"}