{"ast":null,"code":"import { useState, useCallback } from 'react';\nimport { randomTetromino } from '../tetrominos';\nimport \"../gameHelpers\";\nimport { STAGE_WIDTH } from '../gameHelpers'; //Here we set the initial state of the player\n\nexport const usePlayer = () => {\n  const [player, setPlayer] = useState({\n    pos: {\n      x: 0,\n      y: 0\n    },\n    tetromino: randomTetromino().shape,\n    collided: false\n  });\n\n  const updatePlayerPos = ({\n    x,\n    y,\n    collided\n  }) => {\n    setPlayer(prev => ({ ...prev,\n      pos: {\n        x: prev.pos.x += x,\n        y: prev.pos.y += y\n      },\n      collided\n    }));\n  };\n\n  const resetPlayer = useCallback(() => {\n    //need another hook to prevent infinite loop\n    setPlayer({\n      pos: {\n        x: STAGE_WIDTH / 2 - 2,\n        y: 0\n      },\n      tetromino: randomTetromino().shape,\n      collided: false\n    });\n  }, []);\n  return [player, updatePlayerPos, resetPlayer];\n};","map":{"version":3,"sources":["/Users/melanierogoff/Desktop/pikatetris/src/hooks/usePlayer.js"],"names":["useState","useCallback","randomTetromino","STAGE_WIDTH","usePlayer","player","setPlayer","pos","x","y","tetromino","shape","collided","updatePlayerPos","prev","resetPlayer"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;AACA,SAASC,eAAT,QAAgC,eAAhC;AACA,OAAO,gBAAP;AACA,SAASC,WAAT,QAA4B,gBAA5B,C,CAEA;;AACA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAC3B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC;AACjCO,IAAAA,GAAG,EAAE;AAAEC,MAAAA,CAAC,EAAE,CAAL;AAAQC,MAAAA,CAAC,EAAE;AAAX,KAD4B;AAEjCC,IAAAA,SAAS,EAAER,eAAe,GAAGS,KAFI;AAGjCC,IAAAA,QAAQ,EAAE;AAHuB,GAAD,CAApC;;AAMA,QAAMC,eAAe,GAAG,CAAC;AAAEL,IAAAA,CAAF;AAAKC,IAAAA,CAAL;AAAQG,IAAAA;AAAR,GAAD,KAAwB;AAC5CN,IAAAA,SAAS,CAACQ,IAAI,KAAK,EACf,GAAGA,IADY;AAEfP,MAAAA,GAAG,EAAE;AAAEC,QAAAA,CAAC,EAAGM,IAAI,CAACP,GAAL,CAASC,CAAT,IAAcA,CAApB;AAAwBC,QAAAA,CAAC,EAAGK,IAAI,CAACP,GAAL,CAASE,CAAT,IAAcA;AAA1C,OAFU;AAGfG,MAAAA;AAHe,KAAL,CAAL,CAAT;AAKH,GAND;;AAQA,QAAMG,WAAW,GAAGd,WAAW,CAAC,MAAM;AAAE;AACpCK,IAAAA,SAAS,CAAC;AACNC,MAAAA,GAAG,EAAE;AAAEC,QAAAA,CAAC,EAAEL,WAAW,GAAG,CAAd,GAAkB,CAAvB;AAA0BM,QAAAA,CAAC,EAAE;AAA7B,OADC;AAENC,MAAAA,SAAS,EAAER,eAAe,GAAGS,KAFvB;AAGNC,MAAAA,QAAQ,EAAE;AAHJ,KAAD,CAAT;AAKH,GAN8B,EAM5B,EAN4B,CAA/B;AAQA,SAAO,CAACP,MAAD,EAASQ,eAAT,EAA0BE,WAA1B,CAAP;AACH,CAxBM","sourcesContent":["import { useState, useCallback } from 'react';\nimport { randomTetromino } from '../tetrominos';\nimport \"../gameHelpers\";\nimport { STAGE_WIDTH } from '../gameHelpers';\n\n//Here we set the initial state of the player\nexport const usePlayer = () => {\n    const [player, setPlayer] = useState({\n        pos: { x: 0, y: 0 },\n        tetromino: randomTetromino().shape,\n        collided: false\n    });\n\n    const updatePlayerPos = ({ x, y, collided }) => {\n        setPlayer(prev => ({\n            ...prev,\n            pos: { x: (prev.pos.x += x), y: (prev.pos.y += y)},\n            collided,\n        }))\n    }\n\n    const resetPlayer = useCallback(() => { //need another hook to prevent infinite loop\n        setPlayer({\n            pos: { x: STAGE_WIDTH / 2 - 2, y: 0 }, \n            tetromino: randomTetromino().shape,\n            collided: false,\n        })\n    }, [])            \n\n    return [player, updatePlayerPos, resetPlayer];\n}"]},"metadata":{},"sourceType":"module"}