{"ast":null,"code":"import { useState, useCallback } from 'react';\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\nimport { STAGE_WIDTH, checkCollision } from '../gameHelpers'; //Here we set the initial state of the player\n\nexport const usePlayer = () => {\n  const [player, setPlayer] = useState({\n    pos: {\n      x: 0,\n      y: 0\n    },\n    tetromino: TETROMINOS[0].shape,\n    collided: false\n  });\n\n  const rotate = (matrix, dir) => {\n    //rotate the tetris block by shifting rows into columns instead and reversing those values\n    const rotatedTetro = matrix.map((_, index) => matrix.map(col => col[index])); //Reversing each row to get a rotated matrix/tetromino\n\n    if (dir > 0) return rotatedTetro.map(row => row.reverse());\n    return rotatedTetro.reverse();\n  };\n\n  const playerRotate = (stage, dir) => {\n    const clonedPlayer = JSON.parse(JSON.stringify(player)); //clone player\n\n    clonedPlayer.tetromino.rotate(clonedPlayer.tetromino.dir);\n    const pos = clonedPlayer.pos.x;\n    let offset = 1;\n\n    while (checkCollision(clonedPlayer, stage, {\n      x: 0,\n      y: 0\n    })) {\n      clonedPlayer.pos.x += offset;\n      offset = -(offset + (offset > 0 ? 1 : -1)); //creates back and forth movement\n\n      if (offset > clonedPlayer.tetromino[0].length) {\n        //rotate it back\n        rotate(clonedPlayer.tetromino, -dir);\n        clonedPlayer.pos.x = pos;\n        return;\n      }\n    }\n\n    setPlayer(clonedPlayer);\n  };\n\n  const updatePlayerPos = ({\n    x,\n    y,\n    collided\n  }) => {\n    setPlayer(prev => ({ ...prev,\n      pos: {\n        x: prev.pos.x += x,\n        y: prev.pos.y += y\n      },\n      collided\n    }));\n  };\n\n  const resetPlayer = useCallback(() => {\n    //need another hook to prevent infinite loop\n    setPlayer({\n      pos: {\n        x: STAGE_WIDTH / 2 - 2,\n        y: 0\n      },\n      tetromino: randomTetromino().shape,\n      collided: false\n    });\n  }, []);\n  return [player, updatePlayerPos, resetPlayer, playerRotate];\n};","map":{"version":3,"sources":["/Users/melanierogoff/Desktop/pikatetris/src/hooks/usePlayer.js"],"names":["useState","useCallback","TETROMINOS","randomTetromino","STAGE_WIDTH","checkCollision","usePlayer","player","setPlayer","pos","x","y","tetromino","shape","collided","rotate","matrix","dir","rotatedTetro","map","_","index","col","row","reverse","playerRotate","stage","clonedPlayer","JSON","parse","stringify","offset","length","updatePlayerPos","prev","resetPlayer"],"mappings":"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","sourcesContent":["import { useState, useCallback } from 'react';\n\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\nimport { STAGE_WIDTH, checkCollision } from '../gameHelpers';\n\n//Here we set the initial state of the player\n\nexport const usePlayer = () => {\n    const [player, setPlayer] = useState({\n        pos: { x: 0, y: 0 },\n        tetromino: TETROMINOS[0].shape,\n        collided: false,\n    });\n\n    const rotate = (matrix, dir) => {\n        //rotate the tetris block by shifting rows into columns instead and reversing those values\n        const rotatedTetro = matrix.map((_, index) => \n            matrix.map(col => col[index]),\n        );\n        //Reversing each row to get a rotated matrix/tetromino\n        if (dir > 0 ) return rotatedTetro.map(row => row.reverse());\n        return rotatedTetro.reverse();\n    };\n\n    const playerRotate = (stage, dir) => {\n        const clonedPlayer = JSON.parse(JSON.stringify(player));//clone player\n        \n        clonedPlayer.tetromino.rotate(clonedPlayer.tetromino.dir);\n\n        const pos = clonedPlayer.pos.x;\n        let offset = 1;\n        \n        while(checkCollision(clonedPlayer, stage, {x: 0, y: 0})) {\n            clonedPlayer.pos.x += offset;\n            offset = -(offset + (offset > 0 ? 1 : -1)); //creates back and forth movement\n            if (offset > clonedPlayer.tetromino[0].length) {\n                //rotate it back\n                rotate(clonedPlayer.tetromino, -dir);\n                clonedPlayer.pos.x = pos;\n                return;\n            }\n        }\n        setPlayer(clonedPlayer);\n    }\n\n    const updatePlayerPos = ({ x, y, collided }) => {\n        setPlayer(prev => ({\n            ...prev,\n            pos: { x: (prev.pos.x += x), y: (prev.pos.y += y)},\n            collided,\n        }))\n    }\n\n    const resetPlayer = useCallback(() => { //need another hook to prevent infinite loop\n        setPlayer({\n            pos: { x: STAGE_WIDTH / 2 - 2, y: 0 }, \n            tetromino: randomTetromino().shape,\n            collided: false,\n        })\n    }, []);            \n\n    return [player, updatePlayerPos, resetPlayer, playerRotate];\n}"]},"metadata":{},"sourceType":"module"}